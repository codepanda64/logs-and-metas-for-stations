# Generated by Django 3.0.2 on 2020-02-24 03:45

from django.db import migrations, models
import django.db.models.deletion
import logs.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('basicinfo', '0001_initial'),
        ('instruments', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='ManageLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('before_state', models.BooleanField(default=True, verbose_name='查台时运行状态')),
                ('after_state', models.BooleanField(default=True, verbose_name='是否恢复正常')),
                ('managed_date', models.DateField(verbose_name='台站管理日期')),
                ('arrived_at', models.TimeField(blank=True, null=True, verbose_name='到达台站时间')),
                ('left_at', models.TimeField(blank=True, null=True, verbose_name='离开台站时间')),
                ('description', models.TextField(blank=True, verbose_name='维护描述')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('station', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='basicinfo.Station', verbose_name='管理的台站')),
            ],
            options={
                'ordering': ('station', 'managed_date'),
                'unique_together': {('station', 'managed_date')},
            },
        ),
        migrations.CreateModel(
            name='Record',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField()),
                ('order', logs.fields.OrderField(blank=True)),
                ('content_type', models.ForeignKey(limit_choices_to={'model__in': ('LocationRecord', 'InstrumentEntityRecord', 'CommmonInstrumentRecord', 'InsertDiskRecord', 'CollectedDataRecord')}, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
                ('manage_log', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='records', to='logs.ManageLog')),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='LocationRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('changed_at', models.DateTimeField()),
                ('is_last', models.BooleanField(default=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('latitude', models.FloatField(default=0.0, verbose_name='纬度')),
                ('longitude', models.FloatField(default=0.0, verbose_name='经度')),
                ('altitude', models.FloatField(default=0.0, verbose_name='高程')),
                ('geo_desciription', models.TextField(blank=True, verbose_name='位置描述')),
                ('lithology_description', models.TextField(blank=True, verbose_name='岩性描述')),
                ('other_info', models.TextField(blank=True, verbose_name='其他信息')),
                ('station', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='locationrecord_related', to='basicinfo.Station', verbose_name='所属台站')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='InstrumentEntityRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('changed_at', models.DateTimeField()),
                ('is_last', models.BooleanField(default=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('instrument_entity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='by_used_histories', to='instruments.InstrumentEntity', verbose_name='更换测震仪器记录')),
                ('station', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='instrumententityrecord_related', to='basicinfo.Station', verbose_name='所属台站')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='InsertDiskRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('changed_at', models.DateTimeField()),
                ('is_last', models.BooleanField(default=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('disk1_size', models.FloatField(default=0.0, verbose_name='卡1')),
                ('disk2_size', models.FloatField(default=0.0, verbose_name='卡2')),
                ('station', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='insertdiskrecord_related', to='basicinfo.Station', verbose_name='所属台站')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CommmonInstrumentRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('changed_at', models.DateTimeField()),
                ('is_last', models.BooleanField(default=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('quantity', models.PositiveIntegerField(default=1, verbose_name='数量')),
                ('instrument', models.ForeignKey(limit_choices_to={'is_model': False}, on_delete=django.db.models.deletion.CASCADE, related_name='by_used_histories', to='instruments.Instrument', verbose_name='更换仪器记录')),
                ('station', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='commmoninstrumentrecord_related', to='basicinfo.Station', verbose_name='所属台站')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CollectedDataRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('changed_at', models.DateTimeField()),
                ('is_last', models.BooleanField(default=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('disk1_used', models.FloatField(default=0.0, verbose_name='卡1')),
                ('disk2_used', models.FloatField(default=0.0, verbose_name='卡2')),
                ('station', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='collecteddatarecord_related', to='basicinfo.Station', verbose_name='所属台站')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BeforeStatusCheck',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('input_voltage', models.FloatField(default=0.0, verbose_name='输入电压')),
                ('backup_voltage', models.FloatField(default=0.0, verbose_name='备份电压')),
                ('gps_lock_satellite', models.PositiveIntegerField(default=0, verbose_name='GPS锁定星数')),
                ('calibration_signal', models.BooleanField(default=True, verbose_name='标定信号是否正常')),
                ('dist_status', models.BooleanField(default=True, verbose_name='存储卡状态')),
                ('status', models.CharField(choices=[('good', '工作正常/数据可用'), ('discontinuous', '工作不连续/数据不连续'), ('malfunction', '设备故障/数据不可用'), ('other', '其它情况')], default='good', max_length=50, verbose_name='台站总体状态')),
                ('manage_log', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='logs_beforestatuscheck_related', to='logs.ManageLog')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AfterStatusCheck',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('input_voltage', models.FloatField(default=0.0, verbose_name='输入电压')),
                ('backup_voltage', models.FloatField(default=0.0, verbose_name='备份电压')),
                ('gps_lock_satellite', models.PositiveIntegerField(default=0, verbose_name='GPS锁定星数')),
                ('calibration_signal', models.BooleanField(default=True, verbose_name='标定信号是否正常')),
                ('dist_status', models.BooleanField(default=True, verbose_name='存储卡状态')),
                ('status', models.CharField(choices=[('good', '工作正常/数据可用'), ('discontinuous', '工作不连续/数据不连续'), ('malfunction', '设备故障/数据不可用'), ('other', '其它情况')], default='good', max_length=50, verbose_name='台站总体状态')),
                ('manage_log', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='logs_afterstatuscheck_related', to='logs.ManageLog')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
